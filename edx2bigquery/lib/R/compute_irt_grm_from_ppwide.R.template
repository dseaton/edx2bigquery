#
# File:   {{script_name}}
# Date:   {{the_date}}
#
# Compute Item Response Theory analysis using the Graded Response Model for all course items.
# Uses "mirt" and R.
#
# Input data is the "person-problem" wide table (generated by Stata).
# Compares a,b,theta results with those from IRT GRM in Stata.
#
# This version: {{course_id}}
#
# TEMPLATE: {{template_file}}

setwd("{{working_dir}}")

# install.packages(c("readstata13", "mirt", "ltm", "stringr"))

if(1){
	require("readstata13")
	require("mirt")
	require("ltm")
	require("stringr")
}

#--------------------------------------------------------------------------------------------
# configuration

course_id <- "{{course_id}}"
bin_dir <<- "{{bin_dir}}"
lib_dir <<- "{{lib_dir}}"
working_dir <<- "{{working_dir}}"
project_id <<- "{{project_id}}"
table_prefix <<-  "{{table_prefix}}"
force_recompute <<- {{force_recompute}}		# note - global variable!

output_table = "{{output_table}}"

cidns = "{{cidns}}"			# cidns <- str_replace_all(course_id, "/", "__")
gsdir = sprintf("gs://%s/%s/DIST", project_id, cidns)

output_pdf = TRUE

#--------------------------------------------------------------------------------------------
# utility functions

source("{{lib_dir}}/R/edx2bq_util.R")

#--------------------------------------------------------------------------------------------
# load main person-problem item response data (wide format, output by STATA)

df = get_bq_data_csv("person_problem_wide", sprintf("DATA/DATA-%s__person_problem_wide.csv", cidns))
summary(df)

#--------------------------------------------------------------------------------------------
# compute IRT

df.items <- df[,2:ncol(df)]
df.items <- df.items[rowSums(is.na(df.items)) != ncol(df.items),]	# drop item if all NA

# remove non-varying items
for (yvar in colnames(df.items)){
    mm = summary(df.items[,yvar])
    if (mm['Min.']==mm['Max.']){
       print(sprintf("-> %s does not vary, dropping!", yvar))
       df.items[,yvar] <- NULL
    }
}

unvarying_rows <- rowSums(is.na(df.items)) != ncol(df.items)	# find indices of rows which are all NA
df.items <- subset(df.items, unvarying_rows)   			# drop row if not varying by user

time.start <- proc.time()
# mres <- mirt(df.items, 1, SE=TRUE, technical=list(removeEmptyRows=T))
mres <- mirt(df.items, 1, SE=TRUE)
time.dt <- proc.time() - time.start
print(sprintf("--> IRT run time = %8.3f seconds", time.dt["elapsed"]))
# itemplot(mres, 26, CE=TRUE)
save(mres,file=dta_name("__R_mirt_results.Rda"))

#--------------------------------------------------------------------------------------------
# IRT parameters (a,b and theta)

df.ab <- coef(mres, as.data.frame=TRUE)
df.theta <- fscores(mres, full.scores.SE=TRUE)

# person-theta dataframe
user_ids <- subset(df[,1], unvarying_rows)
df.person_theta = data.frame(user_id=user_ids, theta=df.theta[,1], thetase=df.theta[,2])
csvfn.pt = file=dta_name("__R_person_theta.csv")
write.csv(df.person_theta, row.names=FALSE, csvfn.pt)
save(df.person_theta,file=dta_name("__R_person_theta.Rda"))
print(head(df.person_theta))

#--------------------------------------------------------------------------------------------
# IRT parameters dataframe, with irt_diff, irt_disc, diff_se, disc_se, problem_nid, cutnum

yvars <- colnames(df.items)		# item names (y1, y2, ...)
irtvars <- rownames(df.ab)
df.irt_params <- data.frame(matrix(ncol=6, nrow=0))
for (yv in yvars){
	problem_nid <- strtoi(substr(yv,2,9999))
	irt_disc <- df.ab[sprintf("%s.a1", yv), "par"]					# y#.a1 = discimination
	# fails when MIRT converges badly:  disc_se <- df.ab[sprintf("%s.a1", yv), "CI_2.5"]			
        disc_se <- NA
	result = tryCatch({
	    disc_se <- df.ab[sprintf("%s.a1", yv), "CI_2.5"]			
	}, warning = function(w) {
	    print(w)
	}, error = function(e) {
	    print(e)
	})
	ncuts <- length(grep(sprintf("%s\\.d[0-9]*", yv), irtvars)) 		# how many cut scores for this variable?
	for (k in 1:ncuts){
		vname = sprintf("%s.d%d", yv, k)					# y#.d# = difficulty * disc
		if (ncuts==1){ vname = sprintf("%s.d", yv) }	# no trailing number if ncuts=1
		irt_diffdisc <- df.ab[vname, "par"]
		irt_diff <- -irt_diffdisc / irt_disc
		# fails when MIRT converges badly: diff_se <- df.ab[vname, "CI_2.5"]
		diff_se <- NA
		result = tryCatch({
		    diff_se <- df.ab[vname, "CI_2.5"]
		}, warning = function(w){ 
		    print(w) 
		}, error = function(e){ 
		    print(e)
 		})
		newrow <- c(irt_diff, irt_disc, diff_se, disc_se, problem_nid, k)
		df.irt_params <- rbind(df.irt_params, newrow)
	}
}

colnames(df.irt_params) <- c("irt_diff","irt_disc","diff_se","disc_se","problem_nid","cutnum")

df.irt_params <- transform(df.irt_params, problem_nid = as.integer(problem_nid))	# make sure problem_nid is integer
df.irt_params <- transform(df.irt_params, cutnum = as.integer(cutnum))			# make sure cutnum is integer

csvfn.ip = dta_name("__R_item-irt-grm.csv")
write.csv(df.irt_params, row.names=FALSE, file=csvfn.ip, na="")
save(df.irt_params,file=dta_name("__R_item-irt-grm.Rda"))
print(head(df.irt_params))

#--------------------------------------------------------------------------------------------
# upload results to BQ

if (1){
	upload_data_to_bq(df.person_theta, "person_theta_R", csvfn.pt, "IRT person theta estimates from R using mirt")
	upload_data_to_bq(df.irt_params, "item_irt_grm_R", csvfn.ip, "IRT Parameters from R using mirt")
}

#--------------------------------------------------------------------------------------------
# compare person-theta with results from STATA

df.stata_pt = get_bq_data_csv("person_irtgrm_theta", sprintf("DATA/DATA-%s__person_irtgrm_theta.csv", cidns))
summary(df.stata_pt)

names(df.stata_pt)[names(df.stata_pt)=="theta"] <- "theta_stata"
df.both_pt <- merge(df.person_theta,df.stata_pt, by="user_id")
names(df.both_pt)[names(df.both_pt)=="theta"] <- "theta_R"

my_add_line <- function(xdat, ydat){
	    tfit <- lm(ydat ~ xdat)
	    t.intercept <- tfit$coefficients[1]
	    t.slope <- tfit$coefficients[2]
	    fit.eq <- sprintf("y_fit = %6.3f + %6.4f * x\nLine shows y=x", t.intercept, t.slope)
	    dy <- max(ydat) - min(ydat)
	    dx <- max(xdat) - min(xdat)
	    text(min(xdat)+0.03*dx, max(ydat)-0.05*dy,fit.eq, pos=4)
	    abline(0,1)
}

if (output_pdf){
   pdf.fn = plot_name("__irt_R_vs_stata.pdf")
   pdf(pdf.fn)
}else{
	dev.set(2)
}
plot(df.both_pt[,"theta_R"], df.both_pt[,"theta_stata"], 
	 xlab="Theta computed by R using mirt", ylab="Theta computed by STATA using irt grm")
title(sprintf("[%s] IRT learner thetas: R vs. STATA", course_id))
my_add_line(df.both_pt[,"theta_R"], df.both_pt[,"theta_stata"])

#--------------------------------------------------------------------------------------------
# compare IRT paramters with those from STATA

df.stata_ip = get_bq_data_csv("item_irt_grm", sprintf("DATA/DATA-%s__item_irt_grm.csv", cidns))
summary(df.stata_ip)

names(df.stata_ip)[names(df.stata_ip)=="irt_diff"] <- "stata_diff"
names(df.stata_ip)[names(df.stata_ip)=="irt_disc"] <- "stata_disc"
df.both_ip <- merge(df.irt_params, df.stata_ip[,c("stata_diff", "stata_disc", "problem_nid", "cutnum")], 
      		     by=c("problem_nid", "cutnum"))

if (!output_pdf){ 
   if (length(dev.list()) < 2) {	dev.new() }
   dev.set(3) 
}
plot(df.both_ip[,"stata_diff"], df.both_ip[,"irt_diff"],
	xlab="IRT difficulty computed with R using mirt",
	ylab="IRT difficulty computed with STATA using irt grm")
title(sprintf("[%s] IRT item difficulties: R vs. STATA", course_id))			  
my_add_line(df.both_ip[,"irt_diff"], df.both_ip[,"stata_diff"])
if (!output_pdf){ 
   if (length(dev.list()) < 3) {	dev.new() }
   dev.set(4) 
}
plot(df.both_ip[,"stata_disc"], df.both_ip[,"irt_disc"],
	xlab="IRT discrimination computed with R using mirt",
	ylab="IRT discrimination computed with STATA using irt grm")
title(sprintf("[%s] IRT item discriminations: R vs. STATA", course_id))			    
my_add_line(df.both_ip[,"irt_disc"], df.both_ip[,"stata_disc"])
if (output_pdf){
   dev.off()
}

df.stata_ip = get_bq_data_csv("item_irt_grm", sprintf("DATA/DATA-%s__item_irt_grm.csv", cidns))
summary(df.stata_ip)

if (!output_pdf){ 
   if (length(dev.list()) < 2) {	dev.new() }
   dev.set(3) 
}
plot(df.irt_params[,"irt_diff"], df.stata_ip[,"irt_diff"],
		 xlab="IRT difficulty computed with R using mirt",
		 ylab="IRT difficulty computed with STATA using irt grm")
title(sprintf("[%s] IRT item difficulties: R vs. STATA", course_id))	  
my_add_line(df.irt_params[,"irt_diff"], df.stata_ip[,"irt_diff"])
if (!output_pdf){ 
   if (length(dev.list()) < 3) {	dev.new() }
   dev.set(4) 
}
plot(df.irt_params[,"irt_disc"], df.stata_ip[,"irt_disc"],
		 xlab="IRT discrimination computed with R using mirt",
		 ylab="IRT discrimination computed with STATA using irt grm")
title(sprintf("[%s] IRT item discriminations: R vs. STATA", course_id))	
my_add_line(df.irt_params[,"irt_disc"], df.stata_ip[,"irt_disc"])
if (output_pdf){
   dev.off()
}

#--------------------------------------------------------------------------------------------
# upload PDF

if(output_pdf){
	upload_file_to_gs(pdf.fn, cidns, "IRT_comparison_stata_vs_R.pdf")
}

#--------------------------------------------------------------------------------------------
print("Done!")
